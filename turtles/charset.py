from typing import List, Dict

from turtles.types import Path


def character_set(width: float, height: float) -> Dict[str, List[Path]]:
    w = width
    h = height
    return {
        'A': [
            Path(start=(0, 0), end=(w/2, h)),
            Path(start=(w/2, h), end=(w, 0)),
            Path(start=(w/4, h/2), end=(3*w/4, h/2)),
        ],
        'B': [
            Path(start=(0, 0), end=(0, h)),
            Path(start=(0, h), end=(3*w/4, h)),
            Path(start=(3*w/4, h), end=(w, 7*h/8)),
            Path(start=(w, 7*h/8), end=(w, 5*h/8)),
            Path(start=(w, 5*h/8), end=(3*w/4, h/2)),
            Path(start=(3*w/4, h/2), end=(0, h/2)),
            Path(start=(3*w/4, h/2), end=(w, 3*h/8)),
            Path(start=(w, 3*h/8), end=(w, h/8)),
            Path(start=(w, h/8), end=(3*w/4, 0)),
            Path(start=(3*w/4, 0), end=(0, 0)),
        ],
        'C': [
            Path(start=(w, h/8), end=(3*w/4, 0)),
            Path(start=(3*w/4, 0), end=(w/4, 0)),
            Path(start=(w/4, 0), end=(0, h/8)),
            Path(start=(0, h/8), end=(0, 7*h/8)),
            Path(start=(0, 7*h/8), end=(w/4, h)),
            Path(start=(w/4, h), end=(3*w/4, h)),
            Path(start=(3*w/4, h), end=(w, 7*h/8)),
        ],
        'D': [
            Path(start=(0, 0), end=(0, h)),
            Path(start=(0, h), end=(3*w/4, h)),
            Path(start=(3*w/4, h), end=(w, 7*h/8)),
            Path(start=(w, 7*h/8), end=(w, h/8)),
            Path(start=(w, h/8), end=(3*w/4, 0)),
            Path(start=(3*w/4, 0), end=(0, 0)),
        ],
        'E': [
            Path(start=(w, 0), end=(0, 0)),
            Path(start=(0, 0), end=(0, h/2)),
            Path(start=(0, h/2), end=(w, h/2)),
            Path(start=(0, h/2), end=(0, h)),
            Path(start=(0, h), end=(w, h)),
        ],
        'F': [
            Path(start=(0, 0), end=(0, h/2)),
            Path(start=(0, h/2), end=(w, h/2)),
            Path(start=(0, h/2), end=(0, h)),
            Path(start=(0, h), end=(w, h)),
        ],
        'G': [
            Path(start=(w/2, h/2), end=(w, h/2)),
            Path(start=(w, h/2), end=(w, h/8)),
            Path(start=(w, h/8), end=(3*w/4, 0)),
            Path(start=(3*w/4, 0), end=(w/4, 0)),
            Path(start=(w/4, 0), end=(0, h/8)),
            Path(start=(0, h/8), end=(0, 7*h/8)),
            Path(start=(0, 7*h/8), end=(w/4, h)),
            Path(start=(w/4, h), end=(3*w/4, h)),
            Path(start=(3*w/4, h), end=(w, 7*h/8)),
        ],
        'H': [
            Path(start=(0, 0), end=(0, h)),
            Path(start=(0, h/2), end=(w, h/2)),
            Path(start=(w, 0), end=(w, h)),
        ],
        'I': [
            Path(start=(0, h), end=(w, h)),
            Path(start=(w/2, h), end=(w/2, 0)),
            Path(start=(0, 0), end=(w, 0)),
        ],
        'J': [
            Path(start=(w, h), end=(w, h/8)),
            Path(start=(w, h/8), end=(w, h/8)),
            Path(start=(w, h/8), end=(3*w/4, 0)),
            Path(start=(3*w/4, 0), end=(w/4, 0)),
            Path(start=(w/4, 0), end=(0, h/8)),
        ],
        'K': [
            Path(start=(0, 0), end=(0, h)),
            Path(start=(0, h/2), end=(w, 0)),
            Path(start=(0, h/2), end=(w, h)),
        ],
        'L': [Path(start=(w, 0), end=(0, 0)), Path(start=(0, 0), end=(0, h))],
        'M': [
            Path(start=(0, 0), end=(0, h)),
            Path(start=(0, h), end=(w/2, h/2)),
            Path(start=(w/2, h/2), end=(w, h)),
            Path(start=(w, h), end=(w, 0)),
        ],
        'N': [
            Path(start=(0, 0), end=(0, h)),
            Path(start=(0, h), end=(w, 0)),
            Path(start=(w, 0), end=(w, h)),
        ],
        'O': [
            Path(start=(0, h/8), end=(0, 7*h/8)),
            Path(start=(0, 7*h/8), end=(w/4, h)),
            Path(start=(w/4, h), end=(3*w/4, h)),
            Path(start=(3*w/4, h), end=(w, 7*h/8)),
            Path(start=(w, 7*h/8), end=(w, h/8)),
            Path(start=(w, h/8), end=(3*w/4, 0)),
            Path(start=(3*w/4, 0), end=(w/4, 0)),
            Path(start=(w/4, 0), end=(0, h/8)),
        ],
        'P': [
            Path(start=(0, 0), end=(0, h)),
            Path(start=(0, h), end=(3*w/4, h)),
            Path(start=(3*w/4, h), end=(w, 7*h/8)),
            Path(start=(w, 7*h/8), end=(w, 5*h/8)),
            Path(start=(w, 5*h/8), end=(3*w/4, h/2)),
            Path(start=(3*w/4, h/2), end=(0, h/2)),
        ],
        'Q': [
            Path(start=(w/2, 3*h/8), end=(w, 0)),
            Path(start=(0, h/8), end=(0, 7*h/8)),
            Path(start=(0, 7*h/8), end=(w/4, h)),
            Path(start=(w/4, h), end=(3*w/4, h)),
            Path(start=(3*w/4, h), end=(w, 7*h/8)),
            Path(start=(w, 7*h/8), end=(w, h/8)),
            Path(start=(w, h/8), end=(3*w/4, 0)),
            Path(start=(3*w/4, 0), end=(w/4, 0)),
            Path(start=(w/4, 0), end=(0, h/8)),
        ],
        'R': [
            Path(start=(0, 0), end=(0, h)),
            Path(start=(0, h), end=(3*w/4, h)),
            Path(start=(3*w/4, h), end=(w, 7*h/8)),
            Path(start=(w, 7*h/8), end=(w, 5*h/8)),
            Path(start=(w, 5*h/8), end=(3*w/4, h/2)),
            Path(start=(3*w/4, h/2), end=(0, h/2)),
            Path(start=(3*w/4, h/2), end=(w, 0)),
        ],
        'S': [
            Path(start=(0, h/8), end=(w/4, 0)),
            Path(start=(w/4, 0), end=(3*w/4, 0)),
            Path(start=(3*w/4, 0), end=(w, h/8)),
            Path(start=(w, h/8), end=(w, 3*h/8)),
            Path(start=(w, 3*h/8), end=(3*w/4, h/2)),
            Path(start=(3*w/4, h/2), end=(w/4, h/2)),
            Path(start=(w/4, h/2), end=(0, 5*h/8)),
            Path(start=(0, 5*h/8), end=(0, 7*h/8)),
            Path(start=(0, 7*h/8), end=(w/4, h)),
            Path(start=(w/4, h), end=(3*w/4, h)),
            Path(start=(3*w/4, h), end=(w, 7*h/8)),
        ],
        'T': [
            Path(start=(0, 7*h/8), end=(0, h)),
            Path(start=(0, h), end=(w, h)),
            Path(start=(w, h), end=(w, 7*h/8)),
            Path(start=(w/2, h), end=(w/2, 0)),
        ],
        'U': [
            Path(start=(w, h), end=(w, h/8)),
            Path(start=(w, h/8), end=(3*w/4, 0)),
            Path(start=(3*w/4, 0), end=(w/4, 0)),
            Path(start=(w/4, 0), end=(0, h/8)),
            Path(start=(0, h/8), end=(0, h)),
        ],
        'V': [Path(start=(0, h), end=(w/2, 0)), Path(start=(w/2, 0), end=(w, h))],
        'W': [
            Path(start=(0, h), end=(w/4, 0)),
            Path(start=(w/4, 0), end=(w/2, h/2)),
            Path(start=(w/2, h/2), end=(3*w/4, 0)),
            Path(start=(3*w/4, 0), end=(w, h)),
        ],
        'X': [Path(start=(0, 0), end=(w, h)), Path(start=(0, h), end=(w, 0))],
        'Y': [
            Path(start=(0, h), end=(w/2, h/2)),
            Path(start=(w/2, h/2), end=(w, h)),
            Path(start=(w/2, h/2), end=(w/2, 0)),
        ],
        'Z': [
            Path(start=(0, h), end=(w, h)),
            Path(start=(w, h), end=(0, 0)),
            Path(start=(0, 0), end=(w, 0)),
            Path(start=(w/4, h/2), end=(3*w/4, h/2)),
        ],
        ' ': [],
        '!': [
            Path(start=(w/2, h), end=(w/2, 3*h/8)),
            Path(start=(w/2, h/8), end=(w/2, 0)),
        ],
        '?': [
            Path(start=(0, 7*h/8), end=(w/4, h)),
            Path(start=(w/4, h), end=(3*w/4, h)),
            Path(start=(3*w/4, h), end=(w, 7*h/8)),
            Path(start=(w, 7*h/8), end=(w, 5*h/8)),
            Path(start=(w, 5*h/8), end=(w/2, h/2)),
            Path(start=(w/2, h/2), end=(w/2, 3*h/8)),
            Path(start=(w/2, h/8), end=(w/2, 0)),

        ],
        'DEBUG': [
            Path(start=(0, 0), end=(0, h)),
            Path(start=(0, h), end=(w, h)),
            Path(start=(w, h), end=(w, 0)),
            Path(start=(w, 0), end=(0, 0)),
        ],
    }
